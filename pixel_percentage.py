# -*- coding: utf-8 -*-
"""Pixel_percentage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iwd-JmIuhhsTU4dp5che9m4R_ie_hOPq
"""

import cv2 
import numpy as np
import csv
# edit the below line with the path to the segmented image for individual pixel percentage. 
img_name = input('/content/color_mask_w11.png')


img = cv2.imread(img_name)

# boundaries for the color red
boundaries = [
    ([128,64, 128], [128,64, 128])
    ]
road = [
    ([128,64, 128], [128,64, 128])
    ]
person = [
    ([60, 20, 220], [60, 20, 220])
    ]
car = [
    ([142,0, 0], [142, 0,0])
    ]
bicycle = [
    ([32,11,119], [32,11,119])
    ]
building = [
    ([70,70,70], [70,70,70])
    ]
trafficlight = [
    ([30,170,250], [30,170,250])
    ]
pole = [
    ([153,153,153], [153,153,153])
    ]
tree = [
    ([35,142,107], [35,142,107])
    ]



for(lower, upper) in road:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
road_pixel = np.count_nonzero(output)
percentage_road = round(road_pixel * 100 / tot_pixel, 2)


for(lower, upper) in person:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
person_pixel = np.count_nonzero(output)
percentage_person = round(person_pixel * 100 / tot_pixel, 2)


for(lower, upper) in car:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
car_pixel = np.count_nonzero(output)
percentage_car = round(car_pixel * 100 / tot_pixel, 2)



for(lower, upper) in bicycle:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
bicycle_pixel = np.count_nonzero(output)
percentage_bicycle = round(bicycle_pixel * 100 / tot_pixel, 2)



for(lower, upper) in building:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
building_pixel = np.count_nonzero(output)
percentage_building = round(building_pixel * 100 / tot_pixel, 2)



for(lower, upper) in trafficlight:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
trafficlight_pixel = np.count_nonzero(output)
percentage_trafficlight = round(trafficlight_pixel * 100 / tot_pixel, 2)



for(lower, upper) in pole:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
pole_pixel = np.count_nonzero(output)
percentage_pole = round(pole_pixel * 100 / tot_pixel, 2)



for(lower, upper) in tree:
    # creates numpy array from boundaries
    lower = np.array(lower, dtype = "uint8")
    upper = np.array(upper, dtype = "uint8")

    # finds colors in boundaries a applies a mask
    mask = cv2.inRange(img, lower, upper)
    output = cv2.bitwise_and(img, img, mask = mask)

    # saves the image
    cv2.imwrite('2'+img_name, output)

tot_pixel = output.size
tree_pixel = np.count_nonzero(output)
percentage_tree = round(tree_pixel * 100 / tot_pixel, 2)





print('Road:'+str(percentage_road))
print('Tree:'+str(percentage_tree))
print('Building:'+str(percentage_building))
print('Person:'+str(percentage_person))
print('Car:'+str(percentage_car))
print('Bicycle:'+str(percentage_bicycle))
print('Traffic light:'+str(percentage_trafficlight))
print('Pole:'+str(percentage_pole))

